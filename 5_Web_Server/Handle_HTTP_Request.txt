Handle HTTP Request

The http.createServer() method includes request and response parameters which is supplied by Node.js. 
The request object can be used to get information about the current HTTP request e.g., url, request header, and data.
The response object can be used to send a response for a current HTTP request.

The following example demonstrates handling HTTP request and response in Node.js.
var http = require('http'); // Import Node.js core module

var server = http.createServer(function (req, res) {   //create web server
    if (req.url == '/') { //check the URL of the current request
        
        // set response header
        res.writeHead(200, { 'Content-Type': 'text/html' }); 
        
        // set response content    
        res.write('<html><body><p>This is home Page.</p></body></html>');
        res.end();    
    }
    else if (req.url == "/student") {        
        res.writeHead(200, { 'Content-Type': 'text/html' });
        res.write('<html><body><p>This is student Page.</p></body></html>');
        res.end();    
    }
    else if (req.url == "/admin") {        
        res.writeHead(200, { 'Content-Type': 'text/html' });
        res.write('<html><body><p>This is admin Page.</p></body></html>');
        res.end();    
    }
    else
        res.end('Invalid Request!');

});

server.listen(5000); //6 - listen for any incoming requests

console.log('Node.js web server at port 5000 is running..')

In the above example, req.url is used to check the url of the current request and based on that it sends the response. 
To send a response, first it sets the response header using writeHead() method and then writes a string as a response body using write() method. 
Finally, Node.js web server sends the response using end() method.





